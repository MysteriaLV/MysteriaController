#define USE_HOLDING_REGISTERS_ONLY
#include <ESP8266WiFi.h>
#include <Modbus.h>
#include <ModbusIP_ESP8266.h>

//////////////// registers of {{ slave_name }} ///////////////////
enum
{
  // The first register starts at address 0
  ACTIONS,      // Always present, used for incoming actions

  // Any registered events, denoted by 'triggered_by_register' in rs485_node of Lua script, 1 and up
  {% for event_id, event in events.items() -%}
  {{ event }},
  {% endfor %}
  TOTAL_ERRORS,     // leave this one, error counter
  TOTAL_REGS_SIZE   // INTERNAL: total number of registers for function 3 and 16 share the same register array
};

//ModbusIP object
ModbusIP mb;

// Action handler. Add all your actions mapped by action_id in rs485_node of Lua script
void process_actions() {
  if (mb.Hreg(ACTIONS) == 0)
    return;

  switch (mb.Hreg(ACTIONS)) {
    {% for action_id, action in actions.items() -%}
    case {{ action_id }} : // Put here code for {{ action }}
      Serial.println("[{{ action }}] action fired");
      // gpioWrite(1, LED_BUILTIN);
      break;
    {% endfor -%}
    }

  // Signal that action was processed
  mb.Hreg(ACTIONS, 0);
}

// Just debug functions for easy testing. Won't be used probably
/* Holds current button state in register */
void buttonStatus(int reg, int pin) { // LOOP
  mb.Hreg(reg, pin);
}
void buttonStatus_setup(int reg, int pin) { // SETUP
  pinMode(pin, INPUT_PULLUP);
}

/* Outputs register value to pin */
void gpioWrite(int reg, int pin) {
  digitalWrite(pin, mb.Hreg(reg));
}
/////////////////////////////////////////////////////////////////

void setup()
{
  Serial.begin(115200);
  Serial.println("TCP ModBus Slave {{ slave_name }}:{{ slave_id }} for {{ game }}");

  mb.config("{{ wifi_sid }}", "{{ wifi_pass }}");
  WiFi.config(IPAddress({{ slave_id|replace(".", ", ") }}), IPAddress(), IPAddress(), IPAddress(), IPAddress());

  Serial.print("Connecting to {{ wifi_sid }} ");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
 
  Serial.println(" CONNECTED!");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  Serial.print("Netmask: ");
  Serial.println(WiFi.subnetMask());

  Serial.print("Gateway: ");
  Serial.println(WiFi.gatewayIP());

  mb.addHreg(ACTIONS, 0);
  {% for event_id, event in events.items() -%}
  mb.addHreg({{ event }}, 0);
  {% endfor -%}

  // Sample calls
  // buttonStatus_setup({{ events[1] }}, <buttonPin>);
}


void loop()
{
  mb.task();              // not implemented yet: mb.Hreg(TOTAL_ERRORS, mb.task());
  process_actions();

  // Notify main console of local events
  {% for event_id, event in events.items() -%}
  // mb.Hreg({{ event }}, 1);
  {% endfor %}

  // Sample calls
  // buttonStatus({{ events[1] }}, <buttonPin>);
}
