#define USE_HOLDING_REGISTERS_ONLY
#include <ESP8266WiFi.h>
#include <Modbus.h>
#include <ModbusIP_ESP8266.h>

//////////////// registers of ALIEN_ARM ///////////////////
enum
{
  // The first register starts at address 0
  ACTIONS,      // Always present, used for incoming actions

  // Any registered events, denoted by 'triggered_by_register' in rs485_node of Lua script, 1 and up
  COMPLETE,
  
  TOTAL_ERRORS,     // leave this one, error counter
  TOTAL_REGS_SIZE   // INTERNAL: total number of registers for function 3 and 16 share the same register array
};

//ModbusIP object
ModbusIP mb;

// Action handler. Add all your actions mapped by action_id in rs485_node of Lua script
void process_actions() {
  if (mb.Hreg(ACTIONS) == 0)
    return;

  switch (mb.Hreg(ACTIONS)) {
    case 1 : // Reset
      // Put here code for Reset
      Serial.println("Reset");
      // gpioWrite(1, LED_BUILTIN);
      break;
    }

  // Signal that action was processed
  mb.Hreg(ACTIONS, 0);
}

// Just debug functions for easy testing. Won't be used probably
/* Holds current button state in register */
void buttonStatus(int reg, int pin) { // LOOP
  mb.Hreg(reg, pin);
}
void buttonStatus_setup(int reg, int pin) { // SETUP
  pinMode(pin, INPUT_PULLUP);
}

/* Outputs register value to pin */
void gpioWrite(int reg, int pin) {
  digitalWrite(pin, mb.Hreg(reg));
}
/////////////////////////////////////////////////////////////////

void setup()
{

  Serial.begin(115200);
 
  mb.config("sdfsdf", "sdfdsfds");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
 
  Serial.println("");
  Serial.println("WiFi connected");  
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  mb.addHreg(ACTIONS, 0);
  mb.addHreg(COMPLETE, 0);
  mb.addHreg(TOTAL_ERRORS, 0);
  
  // Debug sample calls
  // buttonStatus_setup(COMPLETE, <buttonPin>);
}


void loop()
{
  //Call once inside loop() - all magic here
  mb.task();
  // not implemented yet: holdingRegs[TOTAL_ERRORS] = mb.task();
  process_actions();

  // Notify main console of local events
  // holdingRegs[COMPLETE] = <data>;
  

  // Debug sample calls
  // buttonStatus(COMPLETE, <buttonPin>);
}